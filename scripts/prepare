#!/usr/bin/env python
import os
from dataclasses import asdict, dataclass
from datetime import datetime
from pathlib import Path

import click
import yaml

from advent_of_code.api import get_problem_soup


@dataclass(frozen=True)
class TestCase:
    input: str
    answer: str


def configure_yaml_multiline_dump() -> None:
    """Configures YAML to use the '|' style for multiline strings."""

    def str_presenter(dumper, data):
        if data.count('\n') > 0:  # Check for multiline string
            return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='|')
        return dumper.represent_scalar('tag:yaml.org,2002:str', data)

    yaml.add_representer(str, str_presenter)


def get_tests(year: int, day: int) -> list[TestCase]:
    """Fetches test cases for the given year and day."""
    soup = get_problem_soup(year, day)
    test_cases = []
    for part in soup.find_all('article'):
        pres = part.find_all('pre') or soup.find_all('pre')
        if not pres:
            continue
        input_text = pres[0].text.rstrip()

        codes = part.find_all('code') or soup.find_all('code')
        code_ems = [em.text for code in codes if (em := code.find('em'))]
        codes = [code.text for code in codes]
        assert code_ems or codes
        answer = code_ems[-1] if code_ems else codes[-1]
        test_cases.append(TestCase(input_text, answer))
    return test_cases


def create_python_file(year: int, day: int):
    """Creates the Python file for the given day if it doesn't exist."""
    python_file_path = Path(f'{os.path.dirname(__file__)}/../advent_of_code/{year}/python/{day:02d}.py')
    if not python_file_path.exists():
        python_file_path.parent.mkdir(parents=True, exist_ok=True)
        python_file_path.write_text(
            "\ndef part1(text):\n    pass\n\ndef part2(text):\n    pass\n"
        )
        print(f'Created {python_file_path}')


@click.command()
@click.option(
    '--year', '-y', default=datetime.now().year, help="Year of the challenge."
)
@click.option('--day', '-d', default=datetime.now().day, help="Day of the challenge.")
def main(year: int, day: int):
    configure_yaml_multiline_dump()

    test_config_path = Path(f'{os.path.dirname(__file__)}/../advent_of_code/{year}/tests/{day:02d}.yml')
    test_data = {}
    # Load existing test data if the file exists
    if test_config_path.exists():
        with open(test_config_path) as f:
            test_data = yaml.safe_load(f) or {}

    # Fetch test cases from the problem
    test_cases = get_tests(year, day)

    # Update test data
    for part, test_case in zip(['part1', 'part2'], test_cases):
        if part not in test_data:
            test_data[part] = [asdict(test_case)]

    # Write updated test data to YAML file
    if test_data:
        test_config_path.parent.mkdir(parents=True, exist_ok=True)
        with open(test_config_path, 'w') as f:
            yaml.dump(test_data, f, sort_keys=False)
        print(f'Tests added to {test_config_path}')

    # Ensure the Python file exists
    create_python_file(year, day)


if __name__ == '__main__':
    main()
