#!/usr/bin/env python
import os
import re
import subprocess
from abc import ABC, abstractmethod
from datetime import datetime
from enum import Enum
from importlib import import_module
from typing import Any

import click
import yaml
from advent_of_code.api import get_problem_input_data, get_problem_soup, submit_solution
from bs4 import BeautifulSoup


class Part(Enum):
    PART1 = 'part1'
    PART2 = 'part2'


class Runner(ABC):
    def __init__(self, year: int, day: int) -> None:
        self.year = year
        self.day = day

    @abstractmethod
    def run(self, part: Part, input_data: str, **kwargs: Any) -> str: ...


class Language(Enum):
    PYTHON = 'python'
    RUST = 'rust'


class PythonRunner(Runner):
    def __init__(self, year: int, day: int):
        super().__init__(year, day)
        self.module = import_module(f'advent_of_code.{year}.python.{day:02d}')

    def run(self, part: Part, input_data: str, **kwargs: Any) -> str:
        part_func = getattr(self.module, part.value, None)
        return str(part_func(input_data, **kwargs))


class RustRunner(Runner):
    def __init__(self, year: int, day: int):
        super().__init__(year, day)
        self.binary_path = os.path.join(
            os.path.join(os.path.dirname(__file__), '..', 'advent_of_code'),
            f'{year}/rust/target/debug/{day:02d}',
        )
        assert os.path.exists(self.binary_path), f'{self.binary_path} does not exist'
        self.input_file = os.path.join(
            os.path.join(os.path.dirname(__file__), '..', 'advent_of_code'),
            f'{year}/rust/inputs/{day:02d}.txt',
        )

    def run(self, part: Part, input_data: str, **kwargs: Any) -> str:
        with open(self.input_file, 'w') as f:
            f.write(input_data)

        try:
            # Call the Rust binary with the input file and part argument
            result = subprocess.run(
                [self.binary_path, part.value, self.input_file],
                capture_output=True,
                text=True,
                check=True,
            )
            return result.stdout.strip()
        except subprocess.CalledProcessError as e:
            print(f"Error running Rust binary: {e}")
            print(f"stderr: {e.stderr}")
            return ""


language_runner_map = {
    Language.PYTHON: PythonRunner,
    Language.RUST: RustRunner,
}


class ProblemSolver:
    GREEN = '\033[92m'
    RESET = '\033[0m'

    def __init__(self, runner: Runner):
        self.runner = runner
        self.test_data = self.read_test_data()

    def read_test_data(self) -> dict[str, Any]:
        test_folder = os.path.join(
            os.path.join(os.path.dirname(__file__), '..', 'advent_of_code'),
            str(self.runner.year),
            'tests',
        )
        os.makedirs(test_folder, exist_ok=True)
        test_config_path = os.path.join(test_folder, f'{self.runner.day:02d}.yml')
        with open(test_config_path, 'r') as file:
            test_data = yaml.safe_load(file)
        return test_data

    @staticmethod
    def _equal_status(generated: Any, expected: Any) -> str:
        return (
            f'✅ {generated} == {expected}'
            if generated == expected
            else f'❌ {generated} != {expected}'
        )

    def run_test(
        self, test_index: int, part: Part, test_case: dict[str, Any]
    ) -> bool:
        input_data = test_case.pop('input')
        expected_output = str(test_case.pop('answer'))
        parameters = test_case
        generated_output = self.runner.run(part, input_data, **parameters)
        status = self._equal_status(generated_output, expected_output)
        print(f'test {part.value}.{test_index}: {status}')
        return generated_output == expected_output

    def all_tests_pass(self) -> bool:
        all_tests_pass = True
        for part in Part:
            if part.value in self.test_data:
                for test_index, test_case in enumerate(
                    self.test_data[part.value], start=1
                ):
                    all_tests_pass &= self.run_test(test_index, part, test_case)
        return all_tests_pass

    def fetch_existing_answers(self) -> dict[Part, str]:
        soup = get_problem_soup(self.runner.year, self.runner.day)
        answer_ps = soup.find_all('p')
        answers = [
            p.find('code').text
            for p in answer_ps
            if p.text.startswith('Your puzzle answer was')
        ]
        return {
            part: answer
            for part, answer in zip([Part.PART1, Part.PART2], answers)
        }

    def display_solutions(self, answers: dict[Part, str]) -> None:
        print('Problem already solved!')
        full_input = get_problem_input_data(self.runner.year, self.runner.day)
        for part in Part:
            answer = self.runner.run(part, full_input)
            print(
                f'{part.value}:',
                (
                    answer
                    if answer == answers[part]
                    else self._equal_status(answer, answers[part])
                ),
            )

    def submit_and_display_response(self, answer: str, level: int) -> None:
        response = submit_solution(
            answer=answer,
            level=level,
            year=self.runner.year,
            day=self.runner.day,
        )
        soup = BeautifulSoup(response, features='html.parser')
        response = re.sub(r'\s+', ' ', soup.find('article').text)
        status = '✅' if response.startswith('That\'s the right answer!') else '❌'
        print(status)
        print(response)

    def solve(self) -> None:
        print(f'{self.GREEN}[Test]{self.RESET}')
        if not self.all_tests_pass():
            return
        print(f'{self.GREEN}[Submit]{self.RESET}')
        answers = self.fetch_existing_answers()
        if len(answers) == 2:
            self.display_solutions(answers)
        else:
            problem_input_data = get_problem_input_data(
                self.runner.year, self.runner.day
            )
            answer_to_submit = self.runner.run(
                Part.PART1 if len(answers) == 0 else Part.PART2,
                problem_input_data,
            )
            level = len(answers) + 1
            self.submit_and_display_response(answer=answer_to_submit, level=level)


@click.command()
@click.option('--year', '-y', default=datetime.now().year, help='Year of the problem')
@click.option('--day', '-d', default=datetime.now().day, help='Day of the problem')
@click.option('--language', '-l', default=Language.PYTHON.value, help='Language used')
def main(year: int, day: int, language: str) -> None:
    runner_cls = language_runner_map[Language(language)]
    runner = runner_cls(year, day)
    solver = ProblemSolver(runner)
    solver.solve()


if __name__ == '__main__':
    main()
